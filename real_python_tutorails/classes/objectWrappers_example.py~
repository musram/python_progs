class Integer:
    def __init__(self, name):
        self.name = name

    def __get__(self, instance, cls):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, int):
            raise TypeError("Expected integer")
        instance.__dict__[self.name] = value


        
class Float:
    def __init__(self, name):
        self.name = name

    def __get__(self, instance):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, float):
            raise TypeError("Expected flaot")
        instance.__dict__[self.name] = value


class Holding2:
    shares = Integer('shares')
    price = Float('price')
    def __init__(self, name, date, shares, price):
        self.name = name
        self.date = date
        self.shares = shares
        self.price = price

    #methods can also be decorated with property    
    @property
    def cost(self):
        return self.shares * self.price

    def sell(self, nshares):
        self.shares -= nshares


    def __repr__(self):
        return 'Holding({!r},{!r},{!r},{!r}'.format(self.name, self.date, self.shares,  self.price)


    def __str__(self):
        return '{} shares of {} at ${:0.2f}'.format(self.shares, self.name, self.price)

